10*10
q()
which git
install.packages('IRkernel')
IRkernel::installspec(user = FALSE)
IRkernel::installspec()
which git
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(tidyverse)
a = c(1,2,3)
a
library(tidyverse)
d = c(1,2,3)
m = mean(d)
print(m)
squared = (d-m)^2
print(squared)
sum_square = sum(squared)
print(sum_square)
normalize = sum_square/(length(d)-1)
print(normalize)
sqrt(normalize)
# Write you library imports here. E.g.:
library(ggplot2 )
install.packages("tidyverse")
library(tidyverse)
d = c(1,2,3)
m = mean(d)
print(m)
squared = (d-m)^2
print(squared)
sum_square = sum(squared)
print(sum_square)
normalize = sum_square/(length(d)-1)
print(normalize)
sqrt(normalize)
sd_x = function(d){
m = mean(d)
squared = (d-m)^2
sum_square = sum(squared)
normalize = sum_square/(length(d)-1)
sqrt(normalize)
}
# Write you answer here and use more cell if needed
data = c(1,2,3)
sd(data)
sd_x(data)
assert_that(sd_x(data) == sd(data))
?sample
# Write you answer here and use more cell if needed
# three col = selection of coral pop generate 100 values
# number after , is # of values you want selected
coral_pop = sample(c("Montipora capitata", "Porites compressa", "Porites lobata"), 100, replace = TRUE)
health_status = sample(c(TRUE, FALSE), 100, replace = TRUE, prob = c(0.2, 0.8))
print(health_status)
coral_df = data.frame(coral_pop, health_status)
coral_health_tbl = as_tibble(coral_df)
print(coral_health_tbl)
# Write you answer here and use more cell if needed
mapply(return_cover, health_status)
# Write you answer here and use more cell if needed
# Write you answer here and use more cell if needed
ggplot(coral_health_tbl) +
geom_density(aes(x=coral_cover, y=stat(count / sum(count)), fill=coral),
colour="black", alpha=0.2, adjust=2)+
scale_fill_manual(values=c("white", "Blue", "red")) +
labs(x="Coral Cover", y="Density", title="Total coral coverage per species")+
xlim(-10, 20)
data(airquality)
airq_tbl = as_tibble(airquality)
head(airq_tbl)
monthly_avg_SolarR = mapply(airq_tbl$Solar.R, airq_tbl$Month, mean, na.rm=TRUE)
monthly_avg_SolarR
monthly_avg_SolarR[as.character(5)]
monthly_avg_SolarR = tapply(airq_tbl$Solar.R, airq_tbl$Month, mean, na.rm=TRUE)
fix_missing_solar_R = function(x){
if(is.na(x["Solar.R"])){
monthly_avg_SolarR[as.character(x["Month"])]
}else{
x["Solar.R"]
}
}
fix_missing_solar_R(airq_tbl[5,])
SolarR_fixed = apply(airq_tbl, 1, fix_missing_solar_R)
SolarR_fixed
library(tidyverse)
install.packages("geometry")
library(geometry)
install.packages("factoextra")
library(factoextra)
set.seed(246)
W = sort(rnorm(30, 0, 2))
noise = rnorm(30, 0, 2)
X = 0.4 * W + noise
Y = sort(rnorm(10,0, 2))
noise = rnorm(10,0,2)
Z = 1 * Y + noise
random_data = data.frame(W, X, Y, Z)
head(random_data)
outcome = 1 + 2 * W + 3 * X + 3 * Y + 2 * Z
outcome
res_pca = prcomp(random_data, scale=TRUE)
summary(res_pca)
str(res_pca)
#bi-plot
fviz_pca_biplot(res_pca)
#bi-plot
fviz_eig(res_pca)
fviz_pca_var(res_pca)
fviz_pca_biplot(res_pca)
fviz_pca(res_pca)
fviz_pca(res_pca)
fviz_pca_var(res_pca)
fviz_pca_var(res_pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
#variable graph
fviz_pca_var(res_pca,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
fviz_pca_ind(res.pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
res_pca = prcomp(random_data, scale=TRUE)
summary(res_pca)
fviz_pca_ind(res_pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"))
fviz_pca_biplot(res_pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969")
library(tidyverse)
install.packages("geometry")
library(geometry)
install.packages("factoextra")
library(factoextra)
set.seed(246)
W = sort(rnorm(30, 0, 2))
noise = rnorm(30, 0, 2)
X = 0.4 * W + noise
Y = sort(rnorm(10,0, 2))
noise = rnorm(10,0,2)
Z = 1 * Y + noise
set.seed(246)
W = sort(rnorm(30, 0, 2))
noise = rnorm(30, 0, 2)
X = 0.4 * W + noise
Y = sort(rnorm(10,0, 2))
noise = rnorm(10,0,2)
Z = 1 * Y + noise
random_data = data.frame(W, X, Y, Z)
head(random_data)
outcome = 1 + 2 * W + 3 * X + 3 * Y + 2 * Z
outcome
res_pca = prcomp(random_data, scale=TRUE)
summary(res_pca)
str(res_pca)
fviz_pca_biplot(res_pca, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969")
install.packages("ISLR2")
library(ISLR2)
View(Hitters)
head(Hitters)
install.packages("pls")
install.packages("ISLR2")
head(Hitters)
sum(is.na(Hitters$Salary))
dim(Hitters)
Hitters <- na.omit(Hitters)
dim(Hitters)
summary(Salara ~ ., Hitters)
summary(Salary)
summary(Hitters$Salary)
summary(Salary)
summary(Hitters)
library(iNEXT)
library(tidyverse)
library(devtools)
library(dplyr)
library(ggplot2)
#Fix Bug
source ("https://gist.githubusercontent.com/zdealveindy/f30fa1f0264eabe95828218f61e63df0/raw/333937c2155dc3b8afddd1663e266b6183062602/plot.iNEXT_quickfix")
library(vegan)
MHI_dives = read.csv("MHI.txt")
MHI_dives = read.csv("MHI.txt")
setwd("~/R")
MHI_dives = read.csv("MHI.txt")
MHI_dives = read.csv("MHI_dives.txt")
MHI_dives
S <- specnumber(MHI_dives) # total number of species atin each sample (number of species per row inf site x spp matrix)
raremax <- min(rowSums(MHI_dives)) # number of individuals per sample
Srare <- rarefy(MHI_dives, raremax) # rarefy with raremax as inpput (Rarefied species richness)
# plot rarefaction results
plot(S, Srare, xlab = "Number of Individuals", ylab = "Species Diversity", main = "plot(rarefy(MHI_dives, raremax))")
abline(0, 1)
rarecurve(MHI_dives, step = 20, sample = raremax, col = "blue", cex = 0.6, main = "rarecurve()")
DataInfo (MHI_dives, datatype = 'abundance')
MHI_dives <- iNEXT (MHI_dives, datatype = 'abundance')
plot (MHI_dives)
MHI_dives = read.csv("MHI_dives.txt")
MHI_dives
S <- specnumber(MHI_dives) # total number of species atin each sample (number of species per row inf site x spp matrix)
raremax <- min(rowSums(MHI_dives)) # number of individuals per sample
Srare <- rarefy(MHI_dives, raremax) # rarefy with raremax as inpput (Rarefied species richness)
part(mfrow = c(1,2))
plot(S, Srare, xlab = "Number of Individuals", ylab = "Species Diversity", main = "plot(rarefy(MHI_dives, raremax))")
abline(0, 1)
rarecurve(MHI_dives, step = 20, sample = raremax, col = "blue", cex = 0.6, main = "rarecurve()")
DataInfo (MHI_dives, datatype = 'abundance')
MHI_dives <- iNEXT (MHI_dives, datatype = 'abundance')
plot (MHI_dives)
MHI_dives = read.csv("MHI_dives.txt")
MHI_dives
S <- specnumber(MHI_dives) # total number of species atin each sample (number of species per row inf site x spp matrix)
raremax <- min(rowSums(MHI_dives)) # number of individuals per sample
Srare <- rarefy(MHI_dives, raremax) # rarefy with raremax as inpput (Rarefied species richness)
# plot rarefaction results
part(mfrow = c(1,2))
plot(S, Srare, xlab = "Number of Individuals", ylab = "Species Diversity", main = "plot(rarefy(MHI_dives, raremax))")
abline(0, 1)
rarecurve(MHI_dives, step = 15, sample = raremax, col = "blue", cex = 0.6, main = "rarecurve()")
summary(MHI_dives)
S <- specnumber(MHI_dives) # total number of species atin each sample (number of species per row inf site x spp matrix)
raremax <- min(rowSums(MHI_dives)) # number of individuals per sample
Srare <- rarefy(MHI_dives, raremax) # rarefy with raremax as inpput (Rarefied species richness)
# plot rarefaction results
part(mfrow = c(1,2))
# plot rarefaction results
par(mfrow = c(1,2))
plot(S, Srare, xlab = "Number of Individuals", ylab = "Species Diversity", main = "plot(rarefy(MHI_dives, raremax))")
abline(0, 1)
rarecurve(MHI_dives, step = 20, sample = raremax, col = "blue", cex = 0.6, main = "rarecurve()")
S <- specnumber(MHI_dives) # total number of species atin each sample (number of species per row inf site x spp matrix)
raremax <- min(rowSums(MHI_dives)) # number of individuals per sample
Srare <- rarefy(MHI_dives, raremax) # rarefy with raremax as inpput (Rarefied species richness)
# plot rarefaction results
plot(S, Srare, xlab = "Number of Individuals", ylab = "Species Diversity", main = "plot(rarefy(MHI_dives, raremax))")
MHI_dives = read.csv("MHI_dives.txt")
MHI <- data.frame(MHI_dive)
MHI <- data.frame(MHI_dives)
summary(MHI_dives)
("MHI_dives.txt")
MHI <- data.frame(MHI_dives)
MHI
MHI_dives = read.csv("MHI_dives.txt")
MHI <- data.frame(MHI_dives)
MHI
MHI <- tibble(MHI_dives)
MHI
S <- specnumber(MHI) # total number of species atin each sample (number of species per row inf site x spp matrix)
raremax <- min(rowSums(MHI)) # number of individuals per sample
Srare <- rarefy(MHI, raremax) # rarefy with raremax as inpput (Rarefied species richness)
# plot rarefaction results
plot(S, Srare, xlab = "Number of Individuals", ylab = "Species Diversity", main = "plot(rarefy(MHI, raremax))")
abline(0, 1)
rarecurve(MHI, step = 20, sample = raremax, col = "blue", cex = 0.6, main = "rarecurve()")
MHI_dives = read.csv("total species MHI.txt")
MHI <- tibble(MHI_dives)
MHI <- data.frame(MHI_dives)
MHI
summary(MHI)
S <- specnumber(MHI) # total number of species atin each sample (number of species per row inf site x spp matrix)
raremax <- min(rowSums(MHI)) # number of individuals per sample
Srare <- rarefy(MHI, raremax) # rarefy with raremax as inpput (Rarefied species richness)
# plot rarefaction results
plot(S, Srare, xlab = "Number of Individuals", ylab = "Species Diversity", main = "plot(rarefy(MHI, raremax))")
abline(0, 1)
DataInfo (MHI_dives, datatype = 'abundance')
MHI_dives <- iNEXT (MHI_dives, datatype = 'abundance')
MHI_dives = read.csv("total species MHI.txt")
# call iNEXT on the list
MHI <- iNEXT(MHI_dives, q=0, datatype="abundance")
MHI_dives = read.csv("MHI_dives.txt")
# call iNEXT on the list
MHI <- iNEXT(MHI_dives, q=0, datatype="abundance")
out <- iNEXT(MHI, q=0, datatype="abundance")
MHI_dives = read.csv("MHI_dives.txt")
MHI <- data.frame(MHI_dives)
# call iNEXT on the list
MHI <- iNEXT(MHI_dives, q=0, datatype="abundance")
out <- iNEXT(MHI, q=0, datatype="abundance")
# Sample-size-based R/E curves, separating by "site""
ggiNEXT(out, type=1, facet.var="site")
# call iNEXT on the list
MHI <- iNEXT(MHI_dives, q=0, datatype="abundance")
# Sample-size-based R/E curves, separating by "site""
ggiNEXT(MHI, type=1, facet.var="dive")
# Sample-size-based R/E curves, separating by "site""
ggiNEXT(MHI, type=1, facet.var="site")
MHI_dives = read.csv("MHI_dives.txt")
MHI <- data.frame(MHI_dives)
# call iNEXT on the list
MHI <- iNEXT(MHI_dives, q=1, datatype="abundance")
# Sample-size-based R/E curves, separating by "site""
ggiNEXT(MHI, type=1, facet.var="site")
# Sample-size-based R/E curves, separating by "site""
ggiNEXT(MHI, type=1, facet.var="site")
MHI_dives = read.csv("MHI_dives.txt")
MHI <- data.frame(MHI_dives)
# call iNEXT on the list
MHI <- iNEXT(MHI_dives, q=2, datatype="abundance")
# Sample-size-based R/E curves, separating by "site""
ggiNEXT(MHI, type=1, facet.var="site")
MHI_dives = read.csv("MHI_dives.txt")
MHI <- data.frame(MHI_dives)
# call iNEXT on the list
MHI <- iNEXT(MHI_dives, q=0, datatype="abundance")
# Sample-size-based R/E curves, separating by "site""
ggiNEXT(MHI, type=1, facet.var="site")
# Sample-size-based R/E curves, separating by "site""
ggiNEXT(MHI, type=1)
DataInfo (MHI_dives, datatype = 'abundance')
MHI_dives <- iNEXT (MHI_dives, datatype = 'abundance')
plot (MHI_dives)
MHI_features = read.csv("MHI feature.txt")
MHI_features <- data.frame(MHI_features)
# call iNEXT on the list
MHI_features <- iNEXT(MHI_features, q=0, datatype="abundance")
# Sample-size-based R/E curves, separating by "site""
ggiNEXT(MHI_features, type=1)
#iNEXT 2 features
MHI_features = read.csv("MHI feature.txt")
MHI_features <- data.frame(MHI_features)
# call iNEXT on the list
MHI_features <- iNEXT(MHI_features, q=0, datatype="abundance")
#iNEXT 2 features
MHI_features = read.csv("MHI feature.csv")
MHI_features <- data.frame(MHI_features)
# call iNEXT on the list
MHI_features <- iNEXT(MHI_features, q=0, datatype="abundance")
#iNEXT 2 features
MHI_features = read.csv("MHI feature.txt")
MHI_features <- data.frame(MHI_features)
# call iNEXT on the list
MHI_features <- iNEXT(MHI_features, q=0, datatype="abundance")
# Sample-size-based R/E curves, separating by "site""
ggiNEXT(MHI_features, type=1)
#iNEXT method 1 species abundance
DataInfo (EEZ_dives, datatype = 'abundance')
#iNEXT method 1 species abundance
DataInfo (EEZ_dives, datatype = 'abundance')
EEZ_features = read.csv("EEZ_features.txt")
#iNEXT method 1 species abundance
DataInfo (EEZ_dives, datatype = 'abundance')
#iNEXT method 1 species abundance
EEZ_dives = read.csv("EEZ_dives.txt")
DataInfo (EEZ_dives, datatype = 'abundance')
EEZ_dives <- iNEXT (EEZ_dives, datatype = 'abundance')
plot (EEZ_dives)
EEZ_dives <- iNEXT (EEZ_dives, datatype = 'abundance')
#iNEXT method 1 species abundance
EEZ_dives = read.csv("EEZ_dives.txt")
DataInfo (EEZ_dives, datatype = 'abundance')
EEZ_dives <- iNEXT (EEZ_dives, datatype = 'abundance')
plot (EEZ_dives)
EEZ_dives = read.csv("EEZ_dives.txt")
EEZ <- data.frame(EEZ_dives)
# call iNEXT on the list
EEZ_dives <- iNEXT(EEZ_dives, q=0, datatype="abundance")
# Sample-size-based R/E curves
ggiNEXT(EEZ_dives, type=1)
EEZ_features = read.csv("EEZ_features.txt")
EEZ_features <- data.frame(EEZ_features)
# call iNEXT on the list
EEZ_features <- iNEXT(EEZ_features, q=0, datatype="abundance")
# Sample-size-based R/E curves
ggiNEXT(EEZ_features, type=1)
EEZ_features = read.csv("EEZ_features.txt")
EEZ_features <- data.frame(EEZ_features)
# call iNEXT on the list
EEZ_features <- iNEXT(EEZ_features, q=0, datatype="abundance")
# Sample-size-based R/E curves
ggiNEXT(EEZ_features, type=1)
MHI_features = read.csv("MHI_features.txt")
MHI_features <- data.frame(MHI_features)
# call iNEXT on the list
MHI_features <- iNEXT(MHI_features, q=0, datatype="abundance")
# Sample-size-based R/E curves
ggiNEXT(MHI_features, type=1)
MHI_features = read.csv("MHI feature.txt")
MHI_features <- data.frame(MHI_features)
MHI_features <- iNEXT(MHI_features, q=0, datatype="abundance") # call iNEXT on the list
ggiNEXT(MHI_features, type=1) # Sample-size-based R/E curves
MHI_features = read.csv("MHI_features.txt")
MHI_features <- data.frame(MHI_features)
# call iNEXT on the list
MHI_features <- iNEXT(MHI_features, q=0, datatype="abundance")
# Sample-size-based R/E curves
ggiNEXT(MHI_features, type=1)
NWHI_features = read.csv("NWHI_features.txt")
NWHI_features <- data.frame(NWHI_features)
NWHI_features <- iNEXT(NWHI_features, q=0, datatype="abundance") # call iNEXT on the list
ggiNEXT(NWHI_features, type=1) # Sample-size-based R/E curves
NWHI_features = read.csv("NWHI_features.txt")
NWHI_features <- data.frame(NWHI_features)
NWHI_features <- iNEXT(NWHI_features, q=0, datatype="abundance") # call iNEXT on the list
ggiNEXT(NWHI_features, type=1) # Sample-size-based R/E curves
### iNEXT method 2 species abundance by features
NWHI_features = read.csv("NWHI_features.txt")
### iNEXT method 2 species abundance by features
NWHI_features = read.csv("NWHI_features.txt")
setwd("~/R")
NWHI_features = read.csv("NWHI_features.txt")
NWHI_features <- data.frame(NWHI_features)
NWHI_features <- iNEXT(NWHI_features, q=0, datatype="abundance") # call iNEXT on the list
ggiNEXT(NWHI_features, type=1) # Sample-size-based R/E curves
### iNEXT method 2 species abundance by features
NWHI_features = read.csv("NWHI_features.txt")
setwd("~/R/NWHI")
### iNEXT method 2 species abundance by features
NWHI_features = read.csv("NWHI_features.txt")
NWHI_features = read.csv("NWHI_features.txt")
NWHI_features <- data.frame(NWHI_features)
NWHI_features <- iNEXT(NWHI_features, q=0, datatype="abundance") # call iNEXT on the list
ggiNEXT(NWHI_features, type=1) # Sample-size-based R/E curves
